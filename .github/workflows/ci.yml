name: FCB AttestationHub Server CI/CD

on:
  push:
    branches: [ "main" ]


env:
  AWS_REGION: us-east-2 # Change this to your AWS region
  ECR_REPOSITORY: fcb-attestationhub-server  # Change this to your ECR repository name
  EKS_CLUSTER_NAME: fcb-eks-cluster   # Change to your EKS cluster name

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '8'
          cache: 'maven'

      - name: Maven Clean
        run: mvn clean package -DskipTests
        
      - name: Maven Clean
        run: mvn test 
      #  Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: attestationhubserver-war
          path: target/attestationhubserver.war
          retention-days: 30
  security-check:
    runs-on: ubuntu-latest
    needs:  build-test
    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy

    - name: Trivy FS Scan
      run: trivy fs --format table -o fs-report.json .

    - name: Gitleaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json

  docker-build-push:
    needs: [ build-test, security-check ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: attestationhubserver-war
          path: ./target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push the images to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Image pushed to ECR successfully"
          echo "Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Latest: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

  deploy-eks:
    needs: [ docker-build-push ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.29.0'

      - name: Login to Amazon ECR (for registry value)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Substitute image and apply manifests
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI="${REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}"
          sed "s|REPLACE_WITH_IMAGE|$IMAGE_URI|g" k8s/deployment.yaml > k8s/deployment.gen.yaml
          kubectl apply -f k8s/deployment.gen.yaml
          kubectl apply -f k8s/service.yaml
          if [ -f k8s/servicemonitor.yaml ]; then kubectl apply -f k8s/servicemonitor.yaml; fi

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/attestationhubserver --timeout=180s
          kubectl get pods -o wide
     
