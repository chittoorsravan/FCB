name: FCB AttestationHub Server CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      MVN_FLAGS: -B -ntp

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '8'
          cache: 'maven'

      # üîé Locate the real project dir (first pom with packaging != pom)
      - name: Detect project directory
        id: detect
        shell: bash
        run: |
          set -e
          # list poms
          echo "All pom.xml files:" 
          find . -name pom.xml -printf '%p\n' | sed 's|^./||'
          # pick a pom that actually builds an artifact (packaging != pom)
          PROJECT_DIR="$( \
            for P in $(find . -name pom.xml -printf '%p\n'); do
              PKG=$(mvn -q -f "$P" -DforceStdout help:evaluate -Dexpression=project.packaging || true)
              if [ "$PKG" != "pom" ] && [ -n "$PKG" ]; then
                dirname "$P"
                break
              fi
            done )"
          if [ -z "$PROJECT_DIR" ]; then
            # fallback to repo root
            PROJECT_DIR="."
          fi
          echo "project_dir=$PROJECT_DIR" >> "$GITHUB_OUTPUT"
          echo "Using project_dir: $PROJECT_DIR"
          # Show artifact coordinates
          mvn $MVN_FLAGS -f "$PROJECT_DIR/pom.xml" \
            -DforceStdout help:evaluate -Dexpression=project.artifactId | sed -n '1p' || true
          mvn $MVN_FLAGS -f "$PROJECT_DIR/pom.xml" \
            -DforceStdout help:evaluate -Dexpression=project.packaging | sed -n '1p' || true
          mvn $MVN_FLAGS -f "$PROJECT_DIR/pom.xml" \
            -DforceStdout help:evaluate -Dexpression=project.version | sed -n '1p' || true

      # üßπ clean
      - name: Maven Clean
        run: mvn $MVN_FLAGS -f "${{ steps.detect.outputs.project_dir }}/pom.xml" clean

      # üèóÔ∏è compile
      - name: Maven Compile
        run: mvn $MVN_FLAGS -f "${{ steps.detect.outputs.project_dir }}/pom.xml" compile

      # ‚úÖ unit tests
      - name: Maven Test
        run: mvn $MVN_FLAGS -f "${{ steps.detect.outputs.project_dir }}/pom.xml" test

      # üì¶ package (produces target/*.war or *.jar)
      - name: Maven Package
        run: mvn $MVN_FLAGS -f "${{ steps.detect.outputs.project_dir }}/pom.xml" package

      # üîé show any target dirs
      - name: Inspect targets
        run: |
          echo "Listing target folders (depth 3):"
          find . -maxdepth 3 -type d -name target -print
          echo "Artifacts found:"
          find . -type f \( -name "*.war" -o -name "*.jar" \) -print

      # ‚¨ÜÔ∏è upload WAR/JAR from anywhere in the repo (handles submodules)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maven-artifacts
          path: |
            **/target/*.war
            **/target/*.jar
          if-no-files-found: warn
